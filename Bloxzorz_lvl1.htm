<!-- Bacharidis Kostas-2007030079 -->
<!-- TUC Computer Graphics Course TucXorz -->

</script><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>TUC Graphics - WebGL </title>

<!-- external libraries for matrix calculations and maintenance -->
<script type="text/javascript" src="./glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="./webgl-utils.js"></script>

<!-- Code for the vertex shader-->
<script id="shader-vs" type="x-shader/x-vertex">
//attributes for the vertex shader (different for every thread/core that will execute a copy of this)
    attribute vec3 aVertexPosition;
	attribute vec2 aTextureCoord;
    attribute vec3 aVertexNormal; 
	//ModelView and Projection Matrices
    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform mat3 uNMatrix;

    uniform vec3 uAmbientColor;

    uniform vec3 uLightingDirection;
    uniform vec3 uDirectionalColor;

    uniform bool uUseLighting;

	//Variable to be forwarded to the corresponding thread of the fragment shader
  varying vec2 vTextureCoord;
   varying vec3 vLightWeighting;
	//main function of the vertex shader
	//this code will be copied to many shader cores/threads and executed with the associated
	//data for every vertex (matrices, color, etc)
    void main(void) {

	//Each vertex is multiplied with the ModelView and Projection matrices and created a fragment
	    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
		//Its color is forwarded to the fragment shader
          vTextureCoord = aTextureCoord;
	if (!uUseLighting) {
      vLightWeighting = vec3(1.0, 1.0, 1.0);
    } else {
      vec3 transformedNormal = uNMatrix * aVertexNormal;
      float directionalLightWeighting = max(dot(transformedNormal, uLightingDirection), 0.0);
      vLightWeighting = uAmbientColor + uDirectionalColor * directionalLightWeighting;
    }
    }
</script>

<!-- Code for the fragment shader-->
<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

    varying vec2 vTextureCoord;
    varying vec3 vLightWeighting;

    uniform sampler2D uSampler;

    void main(void) {
        vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        gl_FragColor = vec4(textureColor.rgb * vLightWeighting, textureColor.a);
    }
</script>

<!-- Javascript code for the main functionality of the WebGL application-->
<script type="text/javascript">

    //the variable that will accommodate the WebGL context
	//every call to the state machine will be done through this variable
    var gl;

	//Initialize WebGL
    function initGL(canvas) {
        try {
		//get a webgl context
            gl = canvas.getContext("experimental-webgl");
			//assign a viewport width and height based on the HTML canvas element properties
			//(check last lines of code)
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
			//any error is handled here
			//all errors are visible in the console (F12 in Google chrome)
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }


	//Find and compile shaders (vertex + fragment shader)
    function getShader(gl, id) {
	//gets the shader scripts (vertex + fragment)
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
		//create shaders
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

		//ask WebGL to compile shaders
		//we check for errors here too
		//all errors are visible in the console (F12 in Google chrome)
        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


	
    var shaderProgram;

	//Creates a program from a vertex + fragment shader pair
    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
		//link the compiled binaries
        gl.linkProgram(shaderProgram);

		//check for errors, again
        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

		//activate current program
		//this sandbox has only on shader pair
		//we can have as many as we wish in more complex applications
        gl.useProgram(shaderProgram);

		//Update attributes for the vertex shader
		//attributes are accessible only from the vertex shader
		//if we want accessible data from a fragment shader we can use uniform variables,
		//or varyings that will be forwarded from the vertex shader to the fragment shader
		
		//Vertex position data
        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

		//Vertex texture data
         shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
        gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);
		//Vertex normal data
		
        shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
        gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

		//Update uniform variables
		//this variables can be accessed from both the vertex and fragment shader
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
		shaderProgram.nMatrixUniform = gl.getUniformLocation(shaderProgram, "uNMatrix");
        shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");
        shaderProgram.useLightingUniform = gl.getUniformLocation(shaderProgram, "uUseLighting");
        shaderProgram.ambientColorUniform = gl.getUniformLocation(shaderProgram, "uAmbientColor");
        shaderProgram.lightingDirectionUniform = gl.getUniformLocation(shaderProgram, "uLightingDirection");
        shaderProgram.directionalColorUniform = gl.getUniformLocation(shaderProgram, "uDirectionalColor");
    }
<!-- Code for handling the loaded texture-->
  function handleLoadedTexture(texture) {
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.bindTexture(gl.TEXTURE_2D, null);
    }

//Load the texture images for the tiles and the rectangle	
var rectangleTexture;
  function initTexture() {
    rectangleTexture = gl.createTexture();
    rectangleTexture.image = new Image();
    rectangleTexture.image.onload = function() {
      handleLoadedTexture(rectangleTexture)
    }

    rectangleTexture.image.src = "po_rect.gif"; // rectagle image 
	
	  tileTexture = gl.createTexture();
    tileTexture.image = new Image();
    tileTexture.image.onload = function() {
      handleLoadedTexture(tileTexture)
    }

    tileTexture.image.src = "tilewood.gif";//tile texture image
	  STARTtileTexture = gl.createTexture();
    STARTtileTexture.image = new Image();
    STARTtileTexture.image.onload = function() {
      handleLoadedTexture(STARTtileTexture)
    }

    STARTtileTexture.image.src = "start_fin_tile.gif";//start/finish tile texture image
	

  }
	//ModelView and Projection matrices
	//mat4 comes from the external library
    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

	//The matrix stack operation are implemented below to handle local transformations
	
	//Push Matrix Operation
    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

	//Pop Matrix Operation
    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }


	//Sets + Updates matrix uniforms
    function setMatrixUniforms() {
       gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);

        var normalMatrix = mat3.create();
        mat4.toInverseMat3(mvMatrix, normalMatrix);
        mat3.transpose(normalMatrix);
        gl.uniformMatrix3fv(shaderProgram.nMatrixUniform, false, normalMatrix);
    }


	//Rotation function helper
	function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }

    var cubeVertexPositionBuffer;
    var cubeVertexTextureCoordBuffer;
    var cubeVertexIndexBuffer;

	//declaration and initialization of the buffers used for declaring the cubes vertices texture positions and normal vertices of the cubes position vertices
	//these buffers we later be used for the creation of the tile and rectangle(which are deformed versions of the cube) 
    function initBuffers() {
        cubeVertexPositionBuffer = gl.createBuffer();//Create and fill the vertex position buffer which consists of the positions of the vertices of the cube
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        vertices = [
            // Front face
            -1.0, -1.0,  1.0,
             1.0, -1.0,  1.0,
             1.0,  1.0,  1.0,
            -1.0,  1.0,  1.0,

            // Back face
            -1.0, -1.0, -1.0,
            -1.0,  1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0, -1.0, -1.0,

            // Top face
            -1.0,  1.0, -1.0,
            -1.0,  1.0,  1.0,
             1.0,  1.0,  1.0,
             1.0,  1.0, -1.0,

            // Bottom face
            -1.0, -1.0, -1.0,
             1.0, -1.0, -1.0,
             1.0, -1.0,  1.0,
            -1.0, -1.0,  1.0,

            // Right face
             1.0, -1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0,  1.0,  1.0,
             1.0, -1.0,  1.0,

            // Left face
            -1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0,
            -1.0,  1.0,  1.0,
            -1.0,  1.0, -1.0,
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        cubeVertexPositionBuffer.itemSize = 3;
        cubeVertexPositionBuffer.numItems = 24;
		
		//Create and fill the vertex normal buffer which will be used for the application of the lighting in the tile and the rectangle
		cubeVertexNormalBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexNormalBuffer);
        var vertexNormals = [
            // Front face
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,

            // Back face
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,

            // Top face
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // Bottom face
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,

            // Right face
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,

            // Left face
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);
        cubeVertexNormalBuffer.itemSize = 3;
        cubeVertexNormalBuffer.numItems = 24;
		
//Create and fill the texture coordination buffer so that we know how to assign each part of the texture to each vertex of the cube
        cubeVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
        var textureCoords = [
          // Front face
          0.0, 0.0,
          1.0, 0.0,
          1.0, 1.0,
          0.0, 1.0,

          // Back face
          1.0, 0.0,
          1.0, 1.0,
          0.0, 1.0,
          0.0, 0.0,

          // Top face
          0.0, 1.0,
          0.0, 0.0,
          1.0, 0.0,
          1.0, 1.0,

          // Bottom face
          1.0, 1.0,
          0.0, 1.0,
          0.0, 0.0,
          1.0, 0.0,

          // Right face
          1.0, 0.0,
          1.0, 1.0,
          0.0, 1.0,
          0.0, 0.0,

          // Left face
          0.0, 0.0,
          1.0, 0.0,
          1.0, 1.0,
          0.0, 1.0,
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
        cubeVertexTextureCoordBuffer.itemSize = 2;
        cubeVertexTextureCoordBuffer.numItems = 24;
		
//Create and fill the vertex index buffer so that we know which triplet of the vertex position buffer values we will use to create each triangle
//Remember every square side of the cube will be designed as two triangles
        cubeVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        var cubeVertexIndices = [
            0, 1, 2,      0, 2, 3,    // Front face
            4, 5, 6,      4, 6, 7,    // Back face
            8, 9, 10,     8, 10, 11,  // Top face
            12, 13, 14,   12, 14, 15, // Bottom face
            16, 17, 18,   16, 18, 19, // Right face
            20, 21, 22,   20, 22, 23  // Left face
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        cubeVertexIndexBuffer.itemSize = 1;
        cubeVertexIndexBuffer.numItems = 36;
		
			
		
    
    }

	//Helper Variables
    var rCube = 0;
	var xTrans = 0.0;
	var yTrans = 0.0;
	var up=1;
	var previous=0;
	var katw=0;
	var dexia=0;
	var lock=0;

	//we use this variable to make sure that the keyboard value stays the same throughout the computation and the drawing of the scene
	var keylock=0;
	
	//array for keeping pressed keys
	var currentlyPressedKeys = {};

	//Keyboard handler
	//do not touch :) 
    function handleKeyDown(event) {
		if(keylock==0){
        currentlyPressedKeys[event.keyCode] = true;
			
		keylock=1;
		}
    }


	//Keyboard handler
	//do not touch :) 
    function handleKeyUp(event) {
		
        currentlyPressedKeys[event.keyCode] = false;
	
    }

	//Key pressed callback
	//37-40 are the codes for the arrow keys
	//xTrans + yTrans are used in the ModelView matrix for local transformation of the cube
    function handleKeys() {
	if(keylock==1){
	
        if ((currentlyPressedKeys[37])) {
            // Left cursor key
            xTrans =-1;
			dexia=1;
		
        }else{
		
			if ((currentlyPressedKeys[39])) {
		
				dexia =1;		
				// Right cursor key
				xTrans = 1;
				
			}else{
				dexia=0;
				
			}
		}
		
        if ((currentlyPressedKeys[38])) {
            // Up cursor key
            yTrans = 1;
			katw=1;
		
		}else{
			 if ((currentlyPressedKeys[40])) {
		
				yTrans = -1;
				// Down cursor key
				katw=1;
				
			}else{
				katw=0;
			}
		}		
	}	
    }
	
  var xRot = 0;
  var yRot = 0;
  var zRot = 0;
  var current = mat4.create();
  var compare = mat4.create();
  
  
	//For every frame this function draws the complete scene from the beginning
    function drawScene() {
		//the viewport gets the canvas values (that were assigned to the gl context variable)
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
		
		//the frame and depth buffers get cleaned (the depth buffer is used for sorting fragments)
		//without the depth buffer WebGL does not know which fragment is visible for a given pixel
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);	
		//the projection matrix (pMatrix) is set
		//45 degrees Field-Of-View
		//aspect ratio gl.viewportWidth / gl.viewportHeight
		//near plane: 0.1 , far plane: 100
	
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

        mat4.identity(mvMatrix);
		
	
		//the ModelView matrix gets a global transformation ("camera" retracts 25 units and translates in the x-axis by 6 units)
		//z-axis points out of the screen. we translate -8 which is the inverse transform
		//in essence we move the world -25 units to have the world move away from the viewer.
		//REMEMBER there is no actual camera in WebGL
        mat4.translate(mvMatrix, [-6.0, 0, -25.0]);
		
		//Declare and fill the array which consists of the positions,according to the starting point, in which we desing every tile  	
	var world1=[
		0.0, 0.0, //start
	    2.0, 0.0,
		-2.0, 0.0,
		-2.0, 2.0,
		-2.0, -2.0,
		2.0, 2.0,
		2.0, -2.0,
		0.0, 2.0,
		0.0, -2.0,
		0.0, 4.0,
		2.0, 4.0,
		4.0, 0.0,
		
		4.0, 2.0,
		4.0, 4.0,
		6.0, 0.0,
		
		6.0, 4.0,
		6.0, 2.0,
		8.0, 0.0,
		
		8.0, 2.0,
		8.0, 4.0,
		8.0, 6.0,
		10.0, 2.0,
		10.0, 4.0,
		10.0, 6.0,
		10.0, 8.0,
		
		12.0, 2.0,
		12.0, 4.0,
		12.0, 6.0,//end
		12.0, 8.0,
		
		14.0, 2.0,
		14.0, 4.0,
		14.0, 6.0,
		14.0, 8.0,
		
		16.0, 4.0,
		16.0, 6.0
		 ];
// rotate the viewpoint so that we gain something like a panoramic view of the game level scene
  mat4.rotate(mvMatrix, degToRad(38), [1, 0, 0]);
   
	//create the game field by designing each tile in the desired position
    for(k=0; k <=70; k++){
	drawtile(world1[k],world1[k+1]);
	k=k+1;
	}
	//scale the mvMatrix so that we design the rectangle
		mat4.scale(mvMatrix, [1.0, 2.0, 1.0]);
		mat4.translate(mvMatrix,[0.0, 1.0, 0.0]);
		
	
		//a translation associated with the keyboard contained into the boundaries of the canvas
	if(lock==0){
		 mat4.set(mvMatrix,current);
		 lock=1;
	}else{
		 mat4.set(current,mvMatrix);	
	}
	//we move to the desired position associated with the keybord input and the "lock" the keybord so that every input given in the time during the previous traslation is implemented
	//we wont take the new inputs in mind
		if(keylock==1){
		movement(xTrans,yTrans,world1);
		}
		//we bind the buffer for the cube vertices
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
		//we bind the buffer for the normal vertex
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexNormalBuffer);
		gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, cubeVertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);
		//we bind the buffer for the cube texture
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

       gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, rectangleTexture);
        gl.uniform1i(shaderProgram.samplerUniform, 0);
		
		//apply the lighting only if the lighting check box is ticked
		var lighting = document.getElementById("lighting").checked;
        gl.uniform1i(shaderProgram.useLightingUniform, lighting);
        if (lighting) {
            gl.uniform3f(
                shaderProgram.ambientColorUniform,
                parseFloat(document.getElementById("ambientR").value),
                parseFloat(document.getElementById("ambientG").value),
                parseFloat(document.getElementById("ambientB").value)
            );
			 var lightingDirection = [
                parseFloat(document.getElementById("lightDirectionX").value),
                parseFloat(document.getElementById("lightDirectionY").value),
                parseFloat(document.getElementById("lightDirectionZ").value)
            ];
            var adjustedLD = vec3.create();
            vec3.normalize(lightingDirection, adjustedLD);
            vec3.scale(adjustedLD, -1);
            gl.uniform3fv(shaderProgram.lightingDirectionUniform, adjustedLD);

            gl.uniform3f(
                shaderProgram.directionalColorUniform,
                parseFloat(document.getElementById("directionalR").value),
                parseFloat(document.getElementById("directionalG").value),
                parseFloat(document.getElementById("directionalB").value)
            );
        }
		
		//we bind the buffer for the cube vertex indices
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
		//we update the uniforms for the shaders


        setMatrixUniforms();
		//we call the Draw Call of WebGL to draw the cube
		//Triangles mode
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		
		
 
    }

//function that generates the movements of the rectangle and checks via calling another function if the movement is in or out the boundaries of the game level
function movement(x,y,world1) {

//conditions in which up and down arrows pushed previously of the current movement
	if((up ==1)&(katw==1)&(previous==0)){//lay down start
		
				mat4.scale(mvMatrix, [1, 0.5, 1]);
				mat4.translate(mvMatrix,[0.0, -1, 0.0]);
				mat4.translate(mvMatrix,[0.0, 0.0, -3*y]);
				lost_check(world1,1,2,x,y,1);// check if in the boundaries or not
				mat4.scale(mvMatrix, [1, 1, 2]);
				previous=2;
				up=0;
			
	}else{
		if((up ==0)&(katw==1)&((previous==2))){//get up
				
				mat4.scale(mvMatrix, [1, 1, 1/2]);
				mat4.translate(mvMatrix,[0.0, 1, 0.0]);
				mat4.translate(mvMatrix,[0.0, 0.0, -3*y]);
				lost_check(world1,2,2,x,y,0);// check if in the boundaries or not
				
				mat4.scale(mvMatrix, [1, 2, 1]);
				previous=2;
				up=1;
		}else{
			if((up ==1)&(katw==1)&((previous==2)|(previous==1))){//lay down
				mat4.scale(mvMatrix, [1, 0.5, 1]);
				mat4.translate(mvMatrix,[0.0, -1, 0.0]);
				mat4.translate(mvMatrix,[0.0, 0.0, -3*y]);
			
					lost_check(world1,1,2,x,y,1);
	
				
				mat4.scale(mvMatrix, [1, 1, 2]);
				previous=2;
				up=0;
			}else{
				if((up==0)&(katw==1)&(previous==1)){//walk
					previous=1;
					mat4.translate(mvMatrix,[0.0, 0.0, -2*y]);
							lost_check(world1,2,2,x,y,1);
				}
			}
		}
	}
	
	//conditions in which left and right arrows pushed previously of the current movement	
	if((up==1)&(dexia==1)&(previous==0)){//lay down start
			mat4.scale(mvMatrix, [1, 0.5, 1]);
				mat4.translate(mvMatrix,[0.0, -1, 0.0]);
				mat4.translate(mvMatrix,[3*x, 0.0, 0.0]);
				lost_check(world1,1,1,x,y,1);
				mat4.scale(mvMatrix, [2, 1, 1]);
				previous=1;
				up=0;
	}else{
		if((up==1)&(dexia==1)&((previous==1)|(previous==2))){//lay down 
			mat4.scale(mvMatrix, [1, 0.5, 1]);
				mat4.translate(mvMatrix,[0.0, -1, 0.0]);
				mat4.translate(mvMatrix,[3*x, 0.0, 0.0]);
						lost_check(world1,1,1,x,y,1);
				mat4.scale(mvMatrix, [2, 1, 1]);
				previous=1;
				up=0;
		}else{
		
			if((up==0)&(dexia==1)&(previous==2)){//walk
				mat4.translate(mvMatrix,[2*x, 0, 0.0]);
				previous=2;
						lost_check(world1,2,1,x,y,1);
				
			}else{
		  
				if((up==0)&(dexia==1)&(previous==1)){	//get_up			  
			
					mat4.scale(mvMatrix, [0.5, 1, 1]);
					mat4.translate(mvMatrix,[0.0, 1, 0.0]);
					mat4.translate(mvMatrix,[3*x, 0, 0.0]);
							lost_check(world1,2,1,x,y,0);
					previous=1;	   
					mat4.scale(mvMatrix, [1, 2, 1]);
					up=1;
				}
			}
		} 
	}
		 
 mat4.set(mvMatrix, current);




}	
var cur_x=0;
var pre_x=0;
var pre_x1=0;
var pre_z=0;
var pre_z1=0;
var cur_z=0;
var lost=0;

//We use this function to check if the rectangle is in limits , if not then the player loses and the page refreshes so that he can start all over
function lost_check(world1,xapl_perp,axonas,x,y,cond) {

	if(axonas==1){//x-axonas
		pre_x=cur_x;
		pre_z1=cur_z;
		if(xapl_perp==1){
			cur_x=4*x+cur_x;
		}else{
			cur_x=2*x+cur_x;
		}
	}else{
		pre_z=cur_z;
		pre_x1=cur_x;
		if(xapl_perp==1){
			cur_z=-4*y+cur_z;
		}else{
			cur_z=-2*y+cur_z;
		}
	}
	if((cur_x==14)&(cur_z==2)&(pre_z==6)&(pre_x==12)&(cond==1)){
		cur_x=14;
		cur_z=4;
	}else{
		if((cur_x==8)&(cur_z==2)&(pre_x1==8)&(pre_z==6)&(cond==1)){
		
			cur_z=4;
		}else{
			if((cur_z<4)&(pre_z==4)&(pre_x1==cur_x)&(cond==0)){
			cur_z=cur_z-2;
	
			}else{
				if((cur_x==12)&(cur_z==6)&(cond==0)&(pre_x==14)&(pre_z==4)&(pre_x1==14)){

					cur_x=cur_x-2;
				}else{
					if((cur_x==10)&(cur_z==2)&(cond==1)&(pre_x1==10)&(pre_z==6)){
						
						cur_z=cur_z+2;
					}
				}
			}
		}
	}	
	var k=0;
	var done=1;


   do{
		
	if(k<=70){
	
			if((world1[k]==cur_x)&(world1[k+1]==cur_z)){
				done=2;
	
					if((pre_x==14)&(pre_z==0)&(cur_x==16)&(cur_z==4)&(cond==1)){ //special occasion in which we are out of the boundaries so we need to refresh the page
						window.location.href = ".\Bloxzorz_lvl1.htm"
					}else{
						if((cur_z==0)&(cur_x>=10)&(cond==0)){//special occasion in which we are out of the boundaries so need to refresh the page
							window.location.href = ".\Bloxzorz_lvl1.htm"
						}
					}
					if( (cur_x==12)&(cur_z==6)&(cond==0)){//occasion in which we have finished the LEVEL 1 so we need to load the FINISH_LEVEL_1 page
						
						window.location.href = "./Bloxzorz_finish_lvl1.html"
						
					}//end
					
				
			}else{	
			
				k=k+2;
		}
	}else{
		done=3;
		}
	}while(done==1);
	
if(done==3){
			
			window.location.href = "./Bloxzorz_lvl1.htm"//occasions in which we are out of the boundaries so need to refresh the page
		
}
}

//animation parameter
var lastTime = 0;
var elapsed=0;

 function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
             elapsed = timeNow - lastTime;

            xRot -= (75 * elapsed) / 1000.0;
            yRot -= (75 * elapsed) / 1000.0;
            zRot -= (75 * elapsed) / 1000.0;
			
        }
        lastTime = timeNow;
		 		 
    }



	//this is the requestAnimFrame callback
	//For every tick, request another frame
	//handle keyboard, draw the scene, animate (update animation variebles) and continue
    function tick() {
	
        requestAnimFrame(tick);
		
		handleKeys();
			
        drawScene();
        animate();
		keylock=0;
		
		
    }

	//This is the function that draws the tile
	//m,n are the coordinates where the tile will be placed
	function drawtile(m,  n) {
		mvPushMatrix();
		  
		mat4.translate(mvMatrix,[m, 0, n]);
		
		mat4.scale(mvMatrix, [1.0, 0.2, 1.0]);

       	//we bind the buffer for the cube vertices
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
		//we bind the buffer for the normal vertex
		gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexNormalBuffer);
		gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, cubeVertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);
		//if the tile is the "start" tile then apply a different texture from the others
		if(( m ==0 ) & ( n==0)){
		 gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, STARTtileTexture);
        gl.uniform1i(shaderProgram.samplerUniform, 0);
		
		}else{
		//if the tile is the "finish" tile then apply a different texture from the others
		if(( m ==12 ) & ( n==6)){
		//we bind the buffer for the cube texture
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, STARTtileTexture);
        gl.uniform1i(shaderProgram.samplerUniform, 0);
		}else{
		//we bind the buffer for the cube texture
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, tileTexture);
        gl.uniform1i(shaderProgram.samplerUniform, 0);
		}
		}
		//apply lighting to each tile
		var lighting = document.getElementById("lighting").checked;
        gl.uniform1i(shaderProgram.useLightingUniform, lighting);
        if (lighting) {
            gl.uniform3f(
                shaderProgram.ambientColorUniform,
                parseFloat(document.getElementById("ambientR").value),
                parseFloat(document.getElementById("ambientG").value),
                parseFloat(document.getElementById("ambientB").value)
            );
			 var lightingDirection = [
                parseFloat(document.getElementById("lightDirectionX").value),
                parseFloat(document.getElementById("lightDirectionY").value),
                parseFloat(document.getElementById("lightDirectionZ").value)
            ];
            var adjustedLD = vec3.create();
            vec3.normalize(lightingDirection, adjustedLD);
            vec3.scale(adjustedLD, -1);
            gl.uniform3fv(shaderProgram.lightingDirectionUniform, adjustedLD);

            gl.uniform3f(
                shaderProgram.directionalColorUniform,
                parseFloat(document.getElementById("directionalR").value),
                parseFloat(document.getElementById("directionalG").value),
                parseFloat(document.getElementById("directionalB").value)
            );
        }
		
		//we bind the buffer for the cube vertex indices
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
		//we update the uniforms for the shaders

        setMatrixUniforms();
		//we call the Draw Call of WebGL to draw the cube
		//Triangles mode
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		mvPopMatrix();	
	
    }
	
	//Entry point of the WebGL context
	function webGLStart() {
        var canvas = document.getElementById("TUCWebGL");
        
		//Functions for initialization
		//Check above
		initGL(canvas);
        initShaders()
        initBuffers();
		initTexture();
		
		//Background Color: Color assigned for all pixels with no corresponding fragments
        gl.clearColor(0.0, 0.0, 0.0, 0);
		
		//Enable z-buffer for depth sorting
        gl.enable(gl.DEPTH_TEST);

		//define the keyboard handlers
		document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;
		 
		//the first tick of our application
        tick();
    }
	
	

	 
//end of Javascript
</script>

<!-- HMTL for the canvas element-->
<body onload="webGLStart();"> <!-- calls the entry point of our application -->

<center>
    <canvas id="TUCWebGL" style="border:2px ;" width="900" height="500"></canvas>
<head>

<!-- upload the image used as background in the page , declare its dimensions -->
<!-- declare the extra characteristics (like postion,if it will repeat in the page), of the background image using css --> 
<body background="1.jpg" >
 
<style type="text/css">

body {
 background-position:center top;
	background-repeat: repeat-x;
background-size: Auto 510px;
	}
</style>
 <!-- Create the button SKIP TO LEVEL 2 and attaching to the event of pressing it the link to the page of the second level-->
 <!-- using css code we declare the characteristics of the button,like colour , position, layout and form of the letters written inside it and etc. -->  
<a href=".\Bloxzorz_lvl2.html" class="classname">Skip to level 2</a>
<style type="text/css">
.classname {
	-moz-box-shadow:inset 0px 1px 0px 0px #fceaca;
	-webkit-box-shadow:inset 0px 1px 0px 0px #fceaca;
	box-shadow:inset 0px 1px 0px 0px #fceaca;
	background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ffce79), color-stop(1, #eeaf41) );
	background:-moz-linear-gradient( center top, #ffce79 5%, #eeaf41 100% );
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffce79', endColorstr='#eeaf41');
	background-color:#ffce79;
	-moz-border-radius:6px;
	-webkit-border-radius:6px;
	border-radius:6px;
	border:1px solid #eeb44f;
	display:inline-block;
	color:#ffffff;
	font-family:arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:1px 1px 0px #ce8e28;
}.classname:hover {
	background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #eeaf41), color-stop(1, #ffce79) );
	background:-moz-linear-gradient( center top, #eeaf41 5%, #ffce79 100% );
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#eeaf41', endColorstr='#ffce79');
	background-color:#eeaf41;
}.classname:active {
	position:right;
	top:1px;
}

</style>
</head>
<!-- Create the check box for the lighting read the current value and create the fields controlling the lighting parameters.-->
 <br/>  <input type="checkbox" id="lighting" /> Use lighting<br/>
     (Use cursor keys to move the box )

    <br/>
    <br>
<!--Light that comes from specific directions and only lights up things that face the direction it's coming from. We'll call this directional light.-->
  <h2>Directional light:</h2>

    <table style="border: 0; padding: 10px;">
        <tr>
            <td><b>Direction:</b>
            <td>X: <input type="text" id="lightDirectionX" value="-0.25" />
            <td>Y: <input type="text" id="lightDirectionY" value="-0.25" />
            <td>Z: <input type="text" id="lightDirectionZ" value="-1.0" />
        </tr>
        <tr>
            <td><b>Colour:</b>
            <td>R: <input type="text" id="directionalR" value="0.8" />
            <td>G: <input type="text" id="directionalG" value="0.8" />
            <td>B: <input type="text" id="directionalB" value="0.8" />
        </tr>
    </table>
	

	<!--Light that comes from everywhere and lights up everything evenly, regardless of which way it faces. This is called ambient light. -->
	<center>
    <h2>Ambient light:</h2>
    <table style="border: 0; padding: 10px;">
        <tr>
            <td><b>Colour:</b>
            <td>R: <input type="text" id="ambientR" value="0.8" />
            <td>G: <input type="text" id="ambientG" value="0.5" />
            <td>B: <input type="text" id="ambientB" value="0.5" />
        </tr>
    </table>
	<!-- add the TUC image and the song to be played and display its controls-->
	<IMG SRC="fs.jpg" WIDTH=80 HEIGHT=80 align="left">
	<audio src="songlvl1.mp3" controls   loop="loop" autoplay="autoplay"	>

</body></html>